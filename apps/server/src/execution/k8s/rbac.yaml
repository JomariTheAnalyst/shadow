# Service account for Shadow server to manage Firecracker VM pods
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shadow-firecracker-server-sa
  namespace: shadow
  labels:
    app: shadow-firecracker
    component: server
---
# Service account for Firecracker VM pods
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shadow-firecracker-vm-sa
  namespace: shadow
  labels:
    app: shadow-firecracker
    component: vm
automountServiceAccountToken: false  # VMs don't need K8s API access
---
# Role for Shadow server to manage Firecracker VM pods and services
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: shadow
  name: shadow-firecracker-server-role
rules:
# Pod management with privileged access for VMs
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create", "get", "list", "watch", "delete", "patch", "update"]
- apiGroups: [""]
  resources: ["pods/status"]
  verbs: ["get", "patch", "update"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
# Service management
- apiGroups: [""]
  resources: ["services"]
  verbs: ["create", "get", "list", "delete"]
# ConfigMaps for VM configuration
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "list", "delete", "patch", "update"]
# Secrets for VM authentication
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "list", "delete"]
# Persistent Volume Claims for VM storage
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["create", "get", "list", "delete"]
# Events (for debugging)
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list"]
# Node access for Firecracker node selection
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
---
# Bind the role to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: shadow-firecracker-server-binding
  namespace: shadow
subjects:
- kind: ServiceAccount
  name: shadow-firecracker-server-sa
  namespace: shadow
roleRef:
  kind: Role
  name: shadow-firecracker-server-role
  apiGroup: rbac.authorization.k8s.io
---
# Pod Security Policy for Firecracker VMs (requires privileged access)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: shadow-firecracker-vm-psp
  labels:
    app: shadow-firecracker
    component: vm
spec:
  privileged: true  # Required for KVM device access
  allowPrivilegeEscalation: true
  allowedCapabilities:
    - 'SYS_ADMIN'  # Required for VM management
    - 'NET_ADMIN'  # Required for network setup
  allowedHostPaths:
    - pathPrefix: '/dev/kvm'
      readOnly: false
    - pathPrefix: '/var/lib/firecracker'
      readOnly: false
  volumes:
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'hostPath'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'RunAsAny'  # VMs need root access
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
# Cluster role for Firecracker VM pod security policy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: shadow-firecracker-vm-psp-role
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - shadow-firecracker-vm-psp
- apiGroups: ['node.k8s.io']
  resources: ['runtimeclasses']
  verbs: ['get', 'list', 'use']
---
# Bind PSP to VM service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: shadow-firecracker-vm-psp-binding
  namespace: shadow
roleRef:
  kind: ClusterRole
  name: shadow-firecracker-vm-psp-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: shadow-firecracker-vm-sa
  namespace: shadow