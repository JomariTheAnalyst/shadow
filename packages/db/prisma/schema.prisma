generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  tasks         Task[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  githubInstallationId  String?
  githubAppConnected    Boolean   @default(false)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Task {
  id                   String               @id @default(cuid())
  title                String?
  description          String?
  status               TaskStatus           @default(INITIALIZING)
  repoUrl              String
  workspacePath        String?
  baseBranch           String
  shadowBranch         String
  baseCommitSha        String
  initializationStatus InitializationStatus @default(PENDING)
  currentInitStep      InitStepType?
  mode                 TaskMode             @default(FULL_AUTO)
  workspaceCleanedUp   Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  userId               String
  messages             ChatMessage[]
  FileChange           FileChange[]
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions             TaskSession[]
  commands             TerminalCommand[]
  todos                Todo[]
}

model Todo {
  id        String     @id @default(cuid())
  content   String
  status    TodoStatus @default(PENDING)
  sequence  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  taskId    String
  task      Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, sequence])
  @@index([taskId, status])
}

model ChatMessage {
  id               String      @id @default(cuid())
  content          String
  role             MessageRole
  llmModel         String?
  metadata         Json?
  sequence         Int
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  finishReason     String?
  createdAt        DateTime    @default(now())
  taskId           String
  task             Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, sequence])
  @@index([taskId, role, sequence])
  @@index([llmModel, createdAt])
}

model TerminalCommand {
  id           String    @id @default(cuid())
  command      String
  output       String?
  exitCode     Int?
  workingDir   String?
  isBackground Boolean   @default(false)
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  taskId       String
  task         Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
}

model TaskSession {
  id           String    @id @default(cuid())
  podName      String?
  podNamespace String?
  isActive     Boolean   @default(true)
  connectionId String?
  createdAt    DateTime  @default(now())
  endedAt      DateTime?
  taskId       String
  task         Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, isActive])
}

model FileChange {
  id         String   @id
  filePath   String
  operation  FileOp
  oldContent String?
  newContent String?
  diffPatch  String?
  additions  Int      @default(0)
  deletions  Int      @default(0)
  createdAt  DateTime @default(now())
  taskId     String
  Task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
}

enum TaskStatus {
  STOPPED
  INITIALIZING
  ARCHIVED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskMode {
  FULL_AUTO
  INTELLIGENT_AUTO
  MANUAL
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}

enum TodoStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InitializationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum InitStepType {
  CLONE_REPOSITORY
  PROVISION_MICROVM
  SETUP_ENVIRONMENT
  INSTALL_DEPENDENCIES
  CONFIGURE_TOOLS
  VALIDATE_SETUP
  CREATE_POD
  WAIT_SIDECAR_READY
  VERIFY_WORKSPACE
  CLEANUP_POD
}

enum FileOp {
  CREATE
  UPDATE
  DELETE
  RENAME
  MOVE
}
