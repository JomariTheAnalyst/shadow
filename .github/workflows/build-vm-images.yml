name: Build Firecracker VM Images

on:
  push:
    branches: [main]
    paths:
      - "vm-image/**"
      - "apps/sidecar/**"
      - "scripts/build-vm-image.sh"
      - ".github/workflows/build-vm-images.yml"
  pull_request:
    branches: [main]
    paths:
      - "vm-image/**"
      - "apps/sidecar/**"
      - "scripts/build-vm-image.sh"
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: "Force rebuild of VM images"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: shadow-vm

jobs:
  build-vm-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci

      - name: Build workspace packages
        run: |
          npm run generate
          turbo run build --filter="@repo/*"

      - name: Build sidecar service
        run: |
          turbo run build --filter=sidecar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Install VM build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y debootstrap qemu-utils

      - name: Build Firecracker VM images
        run: |
          sudo bash scripts/build-vm-image.sh

      - name: Prepare VM image artifacts
        run: |
          # Create output directory structure
          mkdir -p vm-artifacts/images vm-artifacts/kernels

          # Copy built VM images
          sudo cp vm-image/output/shadow-rootfs.ext4 vm-artifacts/images/
          sudo cp vm-image/output/vmlinux vm-artifacts/kernels/
          sudo cp vm-image/output/manifest.json vm-artifacts/

          # Set proper permissions
          sudo chown -R $USER:$USER vm-artifacts/

          # Generate checksums
          cd vm-artifacts
          sha256sum images/shadow-rootfs.ext4 > checksums.txt
          sha256sum kernels/vmlinux >> checksums.txt

          # Create version info
          cat > version.json << EOF
          {
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "git_sha": "${{ github.sha }}",
            "git_ref": "${{ github.ref }}",
            "workflow_run": "${{ github.run_number }}",
            "ubuntu_version": "22.04",
            "node_version": "20",
            "python_version": "3.11"
          }
          EOF

      - name: Build and push Docker image with VM files
        uses: docker/build-push-action@v5
        with:
          context: vm-image/output
          file: vm-image/output/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload VM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firecracker-vm-images-${{ github.sha }}
          path: vm-artifacts/
          retention-days: 30

      - name: Generate deployment manifest
        run: |
          cat > vm-deployment-manifest.yaml << EOF
          # Firecracker VM Image Deployment Manifest
          # Generated on: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          # Git SHA: ${{ github.sha }}
          # Workflow: ${{ github.run_number }}

          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: shadow-vm-images
            namespace: shadow
            labels:
              app: shadow-firecracker
              component: vm-images
              version: ${{ github.sha }}
          data:
            manifest.json: |
          $(cat vm-artifacts/manifest.json | sed 's/^/    /')
            checksums.txt: |
          $(cat vm-artifacts/checksums.txt | sed 's/^/    /')
            version.json: |
          $(cat vm-artifacts/version.json | sed 's/^/    /')

          ---
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: deploy-vm-images-${{ github.run_number }}
            namespace: shadow
          spec:
            template:
              spec:
                restartPolicy: Never
                containers:
                - name: vm-image-deployer
                  image: ${{ steps.meta.outputs.tags }}
                  command: ["/bin/sh"]
                  args:
                  - -c
                  - |
                    echo "Deploying VM images to cluster nodes..."
                    # Copy VM images to shared storage (EFS/S3)
                    # This job would typically copy images to persistent storage
                    # accessible by Firecracker nodes
                    echo "VM images deployed successfully"
          EOF

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: vm-deployment-manifest-${{ github.sha }}
          path: vm-deployment-manifest.yaml
          retention-days: 30

      - name: Comment on PR with build info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = JSON.parse(fs.readFileSync('vm-artifacts/version.json', 'utf8'));
            const checksums = fs.readFileSync('vm-artifacts/checksums.txt', 'utf8');

            const comment = `## ðŸ”¥ Firecracker VM Images Built Successfully

            **Build Information:**
            - Git SHA: \`${{ github.sha }}\`
            - Build Date: \`${version.build_date}\`
            - Workflow Run: \`${{ github.run_number }}\`

            **VM Image Details:**
            - Ubuntu Version: \`${version.ubuntu_version}\`
            - Node.js Version: \`${version.node_version}\`
            - Python Version: \`${version.python_version}\`

            **Image Checksums:**
            \`\`\`
            ${checksums}
            \`\`\`

            **Docker Image:** \`${{ steps.meta.outputs.tags }}\`

            The VM images are ready for deployment to Firecracker nodes.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-scan:
    runs-on: ubuntu-latest
    needs: build-vm-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
